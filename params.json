{"name":"AdaScreen","tagline":"Ensembles of Screening Rules","body":"### NEWS\r\n- This page, as well as the corresponding code on GitHub, is currently undergoing\r\nmajor changes and likely not to work properly. Please come back later... :)\r\n- Wiki can be found [here](https://github.com/nicococo/AdaScreen/wiki)\r\n\r\n### About the AdaScreen Software Package\r\nWe developed our screening framework in the _Python_ programming language and it can be freely downloaded using\r\nthe link above or conveniently downloaded and installed automatically, using the _pip_ command. \r\n\r\nIt is designed to efficiently implement various screening rules without changing\r\nthe lasso path solver (e.g., scikit-learn lasso solver). \r\nEven though different screening rules require different \r\nconstraints and equations, they all share common data\r\nstructures; thus, we wrap all of them into a single framework. \r\nAn advantage of this approach is that\r\nthe lasso path solver needs to interact with only \r\none abstract class for screening rules.\r\n\r\n### AdaScreen Structure\r\nTo systematically manage data structures involved in screening,\r\nwe divide them into _Globals_ and _Locals_, \r\nwhere _Globals_ refer to\r\nvariables that do not change over the lambda path (e.g., the inputs **X**, **y**, lambda_max). \r\nIn contrast, _Locals_ refer to variables that change over\r\nthe lambda path (e.g., the last regularization parameter lambda_0 or the solution beta^*(lambda_0) from the previous lambda_0). \r\nWe maintain these data structures in the path solver, \r\nand call\r\nthe _init_ method in the _ScreeningRule_\r\nbefore entering the \r\nmain iteration loop of our screening framework. \r\n\r\nFurthermore, we designed our screening framework in such a way that\r\nall screening rules can be derived from the abstract base class.\r\nFor example, many screening rules can be framed with a single sphere constraint, \r\nconsisting of a center and a radius. \r\nIn such cases, screening rules can be implemented by overloading the _getSphere_ function. \r\nFor more advanced methods, corresponding functions need to be overloaded.\r\nNow, let us consider how AdaScreen can be instantiated under our framework.\r\n_AdaScreen_ \r\nmaintains a list of _ScreeningRules_\r\nitself and can return global and local half-space constraints. \r\nTherefore, it is easy to implement AdaScreen with any sphere and any half-space constraints.\r\nFor example, to implement AdaScreen with EDPP sphere constraint and Sasvi local half-space constraint,\r\nwe first instantiate _EDPP_, _Sasvi_, and _AdaScreen_.\r\nThen in _AdaScreen_, we simply call _setSphereRule(EDPP)_ and _addHalfspace(Sasvi)_. \r\n\r\n### About the AdaScreen Screening Ensemble \r\nIn order to solve large-scale lasso problems,\r\nscreening algorithms have been developed\r\nthat discard features with zero coefficients\r\nbased on a computationally efficient screening rule.\r\nMost existing screening rules were developed from\r\na spherical constraint and half-space constraints on the dual optimum.\r\nHowever, existing rules admit at most two half-space constraints\r\ndue to the  computational cost incurred by the half-spaces,\r\neven though additional constraints may be useful to discard more features.\r\nIn this paper, we present AdaScreen, an adaptive lasso screening rule ensemble,\r\nwhich allows to combine any one sphere with multiple\r\nhalf-space constraints on a dual optimal solution.\r\nThanks to geometrical considerations that lead to a simple closed form solution for AdaScreen,\r\nwe can incorporate a large number of half-space constraints\r\nat small computational cost.\r\nIn our experiments, we show that\r\nAdaScreen with multiple half-space constraints simultaneously improves screening performance and\r\nspeeds up lasso solvers.\r\n\r\n### Disclaimer\r\nWhen using the software, or parts of it, please cite:\r\n_to appear_ ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}